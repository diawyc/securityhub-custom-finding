AWSTemplateFormatVersion: 2010-09-09

Resources:
  EventRule:
    Type: 'AWS::Events::Rule'
    Properties:
      Description: EventRule
      EventPattern:
        source:
          - aws.backup
        detail-type:
          - Backup Job State Change
      State: ENABLED
      Targets:
        - Arn:
            'Fn::GetAtt':
              - LambdaFunction
              - Arn
          Id: '1'
  PermissionForEventsToInvokeLambda:
    Type: 'AWS::Lambda::Permission'
    Properties:
      FunctionName:
        Ref: LambdaFunction
      Action: 'lambda:InvokeFunction'
      Principal: events.amazonaws.com
      SourceArn:
        'Fn::GetAtt':
          - EventRule
          - Arn
  LambdaFunction:
    Type: 'AWS::Lambda::Function'
    Properties:
      Runtime: python3.9
      Role: !GetAtt IAMRole.Arn
      Handler: index.lambda_handler
      Code:
        ZipFile: |
          import json
          import boto3
          import datetime
          from datetime import date
          def china(region):
              if region in ['cn-north-1','cn-northwest-1']:
                  findingid='arn:aws-cn:siem:'
                  ProdArn='arn:aws-cn:securityhub:'
              else:
                  findingid='arn:aws:siem:'
                  ProdArn='arn:aws:securityhub:' 
              return(findingid,ProdArn)
          def create_securityhub_finding (aws_account_id,region,resourceid,text,sh,resourcetype):
              title='SIEM Alert-Amazon Backup Job Fail for RDS'
              alertdes=text
              alerttype='Effects/Data Destruction/Backup Data'
              d = datetime.datetime.now()
              new_recorded_time = d.isoformat() + "Z"
              findings=[]
                  #define some field value
              findingid= china(region)[0]
              ProdArn=china(region)[1]
              sh_payload = {
              "SchemaVersion": '2018-10-08',
              "Title": title,
              "AwsAccountId":aws_account_id ,
              "CreatedAt":new_recorded_time ,
              "UpdatedAt":new_recorded_time ,
              "Description": alertdes,
              "FindingProviderFields": {
                  "Severity": {
                      "Label": "CRITICAL",
                      "Original":"CRITICAL"},
                  "Types": [alerttype]
              },
              "GeneratorId": "SIEM Alert generated by lambda",
              "Id": findingid+region+':'+aws_account_id+':finding/data'+resourceid+str(d),
              "ProductArn": ProdArn+region + ':'+aws_account_id+':product/'+aws_account_id+'/default',
              "Resources": [{
                  'Type': resourcetype,
                  'Region': region,
                  'Id': resourceid
              }],
              "Note": {
                  "Text": "Please review this event and take actions",
                  "UpdatedBy":"LambdaFunction",# change this text
                  "UpdatedAt":new_recorded_time}
              }
              #print(sh_payload)
              findings.append(sh_payload)
              print(len(findings))
              print('Creating custom Security Hub finding...')
              try:
                  response = sh.batch_import_findings(
                  Findings=findings)
                  #print(response)
                  print("Successfully imported 1 Security Hub findings")
              except Exception as e:
                  print(e)
          def lambda_handler(event, context):
          #读取backup job log from eventbridge
              aws_account_id = event["account"]
              region = event['region']
              jobstate=event['detail']['state']
              print(jobstate,aws_account_id,region)
              if jobstate == "FAILED":
                  print('detect a failed backup job' )
                  jobid=event['detail']['backupJobId']
                  resourcetype=event['detail']['resourceType']
                  resourceid=event['detail']['resourceArn']
                  text=event['detail']['statusMessage'] #change this if needed
                  print(text)
                  sh = boto3.client('securityhub')
                  create_securityhub_finding (aws_account_id,region,resourceid,text,sh,resourcetype) 
                  return 1
              return('done')
      Description: detect failure backup job and generate finding into securityhub.
      TracingConfig:
        Mode: Active
  IAMRole:
    Type: 'AWS::IAM::Role'
    Properties:
      Description: basic lambda role plus write securityhub
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Policies:
        - PolicyName: backup-sechub-lambda-policy
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - 'securityhub:BatchImportFindings'
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource:
                  - '*'
